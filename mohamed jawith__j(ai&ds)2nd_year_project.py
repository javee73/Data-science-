# -*- coding: utf-8 -*-
"""manoj s (AI&DS)2nd year project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gn53BI9l8JNDOae6W8aeK48Xlv7S6LLk

Upload the Dataset
"""

from google.colab import files
uploaded = files.upload()

"""Load the Dataset"""

import pandas as pd

# Load the dataset
df = pd.read_csv("manoj.csv")
df.head()

"""Data Exploration"""

print("Shape:", df.shape)
print("Columns:", df.columns.tolist())
df.info()
df.describe()

"""Check for Missing Values and Duplicates"""

# Check missing values
print("Missing values:\n", df.isnull().sum())

# Check for duplicates
print("Duplicate rows:", df.duplicated().sum())

"""Visualize a Few Features"""

import seaborn as sns
import matplotlib.pyplot as plt

# Countplot for fraud vs non-fraud
sns.countplot(x='Class', data=df)
plt.title("Fraud vs Non-Fraud Transactions")
plt.xlabel("Class (0 = Non-Fraud, 1 = Fraud)")
plt.ylabel("Count")
plt.show()

# Percentage
fraud_percentage = df['Class'].value_counts(normalize=True) * 100
print("Fraud Class Percentage:\n", fraud_percentage)

"""Correlation Matrix"""

plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), cmap='coolwarm_r', annot=False)
plt.title("Feature Correlation Heatmap")
plt.show()

# Features most correlated with fraud
print(df.corr()['Class'].sort_values(ascending=False).head(10))

"""Feature Scaling & Train-Test Split"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X = df.drop('Class', axis=1)
y = df['Class']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""Train a Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

model = RandomForestClassifier()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

"""Model Evaluation"""

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

"""Compare Multiple Models"""

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier

models = {
    "Logistic Regression": LogisticRegression(),
    "Random Forest": RandomForestClassifier(),
    "SVM": SVC(),
    "Naive Bayes": GaussianNB(),
    "KNN": KNeighborsClassifier()
}

results = {}

for name, clf in models.items():
    clf.fit(X_train, y_train)
    pred = clf.predict(X_test)
    results[name] = accuracy_score(y_test, pred)

# Visualize model comparison
plt.figure(figsize=(10,5))
sns.barplot(x=list(results.keys()), y=list(results.values()))
plt.title("Model Accuracy Comparison")
plt.ylabel("Accuracy")
plt.ylim(0.8, 1.0)
plt.xticks(rotation=45)
plt.show()

!pip install gradio

import gradio as gr
import numpy as np

# Get feature names
feature_names = df.drop('Class', axis=1).columns.tolist()

def predict_fraud(*inputs):
    # Convert to numpy array
    input_array = np.array(inputs).reshape(1, -1)

    # Scale the input using the same scaler
    input_scaled = scaler.transform(input_array)

    # Predict
    prediction = model.predict(input_scaled)[0]
    probability = model.predict_proba(input_scaled)[0][1]

    result = "ðŸš¨ Fraudulent Transaction" if prediction == 1 else "âœ… Legitimate Transaction"
    confidence = f"Confidence: {round(probability * 100, 2)}%"

    return f"{result}\n{confidence}"

# Create input components based on your dataset columns (excluding 'Class')
inputs = [gr.Number(label=col) for col in feature_names]
output = gr.Textbox(label="Prediction")

# Build Interface
gr.Interface(
    fn=predict_fraud,
    inputs=inputs,
    outputs=output,
    title="ðŸ’³ AI-Powered Credit Fraud Detector",
    description="Enter transaction details to detect fraud in real-time.",
    theme="default"
).launch()